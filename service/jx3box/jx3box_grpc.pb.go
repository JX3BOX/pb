// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jx3box

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JX3BoxClient is the client API for JX3Box service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JX3BoxClient interface {
	GetVersion(ctx context.Context, in *VersionParams, opts ...grpc.CallOption) (*Version, error)
	// 获取用户
	GetUser(ctx context.Context, in *UserQueryParams, opts ...grpc.CallOption) (*User, error)
	// 获取当日生日的用户
	GetBirthDayUser(ctx context.Context, in *GetBirthDayUserListParams, opts ...grpc.CallOption) (*UserListResult, error)
	// 获取vip用户信息
	GetVip(ctx context.Context, in *UserQueryParams, opts ...grpc.CallOption) (*Vip, error)
	// 批量获取用户
	GetUserList(ctx context.Context, in *GetUserListParams, opts ...grpc.CallOption) (*UserListResult, error)
	// 用户重命名
	UserRename(ctx context.Context, in *UserRenameParams, opts ...grpc.CallOption) (*UserRenameResult, error)
	// 发放用户荣誉
	GiveUserMedal(ctx context.Context, in *UserMedalParams, opts ...grpc.CallOption) (*UserMedalResult, error)
	// 获取文章
	GetPosts(ctx context.Context, in *PostsQueryParams, opts ...grpc.CallOption) (*PostsQueryResult, error)
	// 发送一个通知
	SendNotify(ctx context.Context, in *NotifyMessage, opts ...grpc.CallOption) (*Empty, error)
	// Send Email To UserID
	SendEmailToUserID(ctx context.Context, in *EmailMessage, opts ...grpc.CallOption) (*Empty, error)
	// send Email to mailbox
	SendEmailToMailbox(ctx context.Context, in *EmailMessage, opts ...grpc.CallOption) (*Empty, error)
}

type jX3BoxClient struct {
	cc grpc.ClientConnInterface
}

func NewJX3BoxClient(cc grpc.ClientConnInterface) JX3BoxClient {
	return &jX3BoxClient{cc}
}

func (c *jX3BoxClient) GetVersion(ctx context.Context, in *VersionParams, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jX3BoxClient) GetUser(ctx context.Context, in *UserQueryParams, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jX3BoxClient) GetBirthDayUser(ctx context.Context, in *GetBirthDayUserListParams, opts ...grpc.CallOption) (*UserListResult, error) {
	out := new(UserListResult)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/GetBirthDayUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jX3BoxClient) GetVip(ctx context.Context, in *UserQueryParams, opts ...grpc.CallOption) (*Vip, error) {
	out := new(Vip)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/GetVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jX3BoxClient) GetUserList(ctx context.Context, in *GetUserListParams, opts ...grpc.CallOption) (*UserListResult, error) {
	out := new(UserListResult)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/GetUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jX3BoxClient) UserRename(ctx context.Context, in *UserRenameParams, opts ...grpc.CallOption) (*UserRenameResult, error) {
	out := new(UserRenameResult)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/UserRename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jX3BoxClient) GiveUserMedal(ctx context.Context, in *UserMedalParams, opts ...grpc.CallOption) (*UserMedalResult, error) {
	out := new(UserMedalResult)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/GiveUserMedal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jX3BoxClient) GetPosts(ctx context.Context, in *PostsQueryParams, opts ...grpc.CallOption) (*PostsQueryResult, error) {
	out := new(PostsQueryResult)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/GetPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jX3BoxClient) SendNotify(ctx context.Context, in *NotifyMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/SendNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jX3BoxClient) SendEmailToUserID(ctx context.Context, in *EmailMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/SendEmailToUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jX3BoxClient) SendEmailToMailbox(ctx context.Context, in *EmailMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/SendEmailToMailbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JX3BoxServer is the server API for JX3Box service.
// All implementations must embed UnimplementedJX3BoxServer
// for forward compatibility
type JX3BoxServer interface {
	GetVersion(context.Context, *VersionParams) (*Version, error)
	// 获取用户
	GetUser(context.Context, *UserQueryParams) (*User, error)
	// 获取当日生日的用户
	GetBirthDayUser(context.Context, *GetBirthDayUserListParams) (*UserListResult, error)
	// 获取vip用户信息
	GetVip(context.Context, *UserQueryParams) (*Vip, error)
	// 批量获取用户
	GetUserList(context.Context, *GetUserListParams) (*UserListResult, error)
	// 用户重命名
	UserRename(context.Context, *UserRenameParams) (*UserRenameResult, error)
	// 发放用户荣誉
	GiveUserMedal(context.Context, *UserMedalParams) (*UserMedalResult, error)
	// 获取文章
	GetPosts(context.Context, *PostsQueryParams) (*PostsQueryResult, error)
	// 发送一个通知
	SendNotify(context.Context, *NotifyMessage) (*Empty, error)
	// Send Email To UserID
	SendEmailToUserID(context.Context, *EmailMessage) (*Empty, error)
	// send Email to mailbox
	SendEmailToMailbox(context.Context, *EmailMessage) (*Empty, error)
	mustEmbedUnimplementedJX3BoxServer()
}

// UnimplementedJX3BoxServer must be embedded to have forward compatible implementations.
type UnimplementedJX3BoxServer struct {
}

func (UnimplementedJX3BoxServer) GetVersion(context.Context, *VersionParams) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedJX3BoxServer) GetUser(context.Context, *UserQueryParams) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedJX3BoxServer) GetBirthDayUser(context.Context, *GetBirthDayUserListParams) (*UserListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBirthDayUser not implemented")
}
func (UnimplementedJX3BoxServer) GetVip(context.Context, *UserQueryParams) (*Vip, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVip not implemented")
}
func (UnimplementedJX3BoxServer) GetUserList(context.Context, *GetUserListParams) (*UserListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedJX3BoxServer) UserRename(context.Context, *UserRenameParams) (*UserRenameResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRename not implemented")
}
func (UnimplementedJX3BoxServer) GiveUserMedal(context.Context, *UserMedalParams) (*UserMedalResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveUserMedal not implemented")
}
func (UnimplementedJX3BoxServer) GetPosts(context.Context, *PostsQueryParams) (*PostsQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (UnimplementedJX3BoxServer) SendNotify(context.Context, *NotifyMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotify not implemented")
}
func (UnimplementedJX3BoxServer) SendEmailToUserID(context.Context, *EmailMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailToUserID not implemented")
}
func (UnimplementedJX3BoxServer) SendEmailToMailbox(context.Context, *EmailMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailToMailbox not implemented")
}
func (UnimplementedJX3BoxServer) mustEmbedUnimplementedJX3BoxServer() {}

// UnsafeJX3BoxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JX3BoxServer will
// result in compilation errors.
type UnsafeJX3BoxServer interface {
	mustEmbedUnimplementedJX3BoxServer()
}

func RegisterJX3BoxServer(s grpc.ServiceRegistrar, srv JX3BoxServer) {
	s.RegisterService(&JX3Box_ServiceDesc, srv)
}

func _JX3Box_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JX3BoxServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jx3box.JX3Box/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JX3BoxServer).GetVersion(ctx, req.(*VersionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _JX3Box_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JX3BoxServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jx3box.JX3Box/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JX3BoxServer).GetUser(ctx, req.(*UserQueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _JX3Box_GetBirthDayUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBirthDayUserListParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JX3BoxServer).GetBirthDayUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jx3box.JX3Box/GetBirthDayUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JX3BoxServer).GetBirthDayUser(ctx, req.(*GetBirthDayUserListParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _JX3Box_GetVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JX3BoxServer).GetVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jx3box.JX3Box/GetVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JX3BoxServer).GetVip(ctx, req.(*UserQueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _JX3Box_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JX3BoxServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jx3box.JX3Box/GetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JX3BoxServer).GetUserList(ctx, req.(*GetUserListParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _JX3Box_UserRename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRenameParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JX3BoxServer).UserRename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jx3box.JX3Box/UserRename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JX3BoxServer).UserRename(ctx, req.(*UserRenameParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _JX3Box_GiveUserMedal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMedalParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JX3BoxServer).GiveUserMedal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jx3box.JX3Box/GiveUserMedal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JX3BoxServer).GiveUserMedal(ctx, req.(*UserMedalParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _JX3Box_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostsQueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JX3BoxServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jx3box.JX3Box/GetPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JX3BoxServer).GetPosts(ctx, req.(*PostsQueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _JX3Box_SendNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JX3BoxServer).SendNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jx3box.JX3Box/SendNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JX3BoxServer).SendNotify(ctx, req.(*NotifyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _JX3Box_SendEmailToUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JX3BoxServer).SendEmailToUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jx3box.JX3Box/SendEmailToUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JX3BoxServer).SendEmailToUserID(ctx, req.(*EmailMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _JX3Box_SendEmailToMailbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JX3BoxServer).SendEmailToMailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jx3box.JX3Box/SendEmailToMailbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JX3BoxServer).SendEmailToMailbox(ctx, req.(*EmailMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// JX3Box_ServiceDesc is the grpc.ServiceDesc for JX3Box service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JX3Box_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jx3box.JX3Box",
	HandlerType: (*JX3BoxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _JX3Box_GetVersion_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _JX3Box_GetUser_Handler,
		},
		{
			MethodName: "GetBirthDayUser",
			Handler:    _JX3Box_GetBirthDayUser_Handler,
		},
		{
			MethodName: "GetVip",
			Handler:    _JX3Box_GetVip_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _JX3Box_GetUserList_Handler,
		},
		{
			MethodName: "UserRename",
			Handler:    _JX3Box_UserRename_Handler,
		},
		{
			MethodName: "GiveUserMedal",
			Handler:    _JX3Box_GiveUserMedal_Handler,
		},
		{
			MethodName: "GetPosts",
			Handler:    _JX3Box_GetPosts_Handler,
		},
		{
			MethodName: "SendNotify",
			Handler:    _JX3Box_SendNotify_Handler,
		},
		{
			MethodName: "SendEmailToUserID",
			Handler:    _JX3Box_SendEmailToUserID_Handler,
		},
		{
			MethodName: "SendEmailToMailbox",
			Handler:    _JX3Box_SendEmailToMailbox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/jx3box.proto",
}
