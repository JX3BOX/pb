// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jx3box

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// JX3BoxClient is the client API for JX3Box service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JX3BoxClient interface {
	// 获取用户
	GetUser(ctx context.Context, in *UserQueryParams, opts ...grpc.CallOption) (*User, error)
}

type jX3BoxClient struct {
	cc grpc.ClientConnInterface
}

func NewJX3BoxClient(cc grpc.ClientConnInterface) JX3BoxClient {
	return &jX3BoxClient{cc}
}

var jX3BoxGetUserStreamDesc = &grpc.StreamDesc{
	StreamName: "GetUser",
}

func (c *jX3BoxClient) GetUser(ctx context.Context, in *UserQueryParams, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JX3BoxService is the service API for JX3Box service.
// Fields should be assigned to their respective handler implementations only before
// RegisterJX3BoxService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type JX3BoxService struct {
	// 获取用户
	GetUser func(context.Context, *UserQueryParams) (*User, error)
}

func (s *JX3BoxService) getUser(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/jx3box.JX3Box/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetUser(ctx, req.(*UserQueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterJX3BoxService registers a service implementation with a gRPC server.
func RegisterJX3BoxService(s grpc.ServiceRegistrar, srv *JX3BoxService) {
	srvCopy := *srv
	if srvCopy.GetUser == nil {
		srvCopy.GetUser = func(context.Context, *UserQueryParams) (*User, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "jx3box.JX3Box",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "GetUser",
				Handler:    srvCopy.getUser,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "protobuf/jx3box.proto",
	}

	s.RegisterService(&sd, nil)
}
