// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jx3box

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// JX3BoxClient is the client API for JX3Box service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JX3BoxClient interface {
	// 获取用户
	GetUser(ctx context.Context, in *UserQueryParams, opts ...grpc.CallOption) (*User, error)
	// 批量获取用户
	GetUserList(ctx context.Context, in *GetUserListParams, opts ...grpc.CallOption) (*UserListResult, error)
	// 用户重命名
	UserRename(ctx context.Context, in *UserRenameParams, opts ...grpc.CallOption) (*UserRenameResult, error)
	// 发放用户荣誉
	GiveUserAward(ctx context.Context, in *UserAwardParams, opts ...grpc.CallOption) (*UserAwardResult, error)
	// 获取文章
	GetPosts(ctx context.Context, in *PostsQueryParams, opts ...grpc.CallOption) (*PostsQueryResult, error)
	// 发送一个通知
	SendNotify(ctx context.Context, in *NotifyMessage, opts ...grpc.CallOption) (*Empty, error)
	// Send Email To UserID
	SendEmailToUserID(ctx context.Context, in *EmailMessage, opts ...grpc.CallOption) (*Empty, error)
	// send Email to mailbox
	SendEmailToMailbox(ctx context.Context, in *EmailMessage, opts ...grpc.CallOption) (*Empty, error)
}

type jX3BoxClient struct {
	cc grpc.ClientConnInterface
}

func NewJX3BoxClient(cc grpc.ClientConnInterface) JX3BoxClient {
	return &jX3BoxClient{cc}
}

var jX3BoxGetUserStreamDesc = &grpc.StreamDesc{
	StreamName: "GetUser",
}

func (c *jX3BoxClient) GetUser(ctx context.Context, in *UserQueryParams, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var jX3BoxGetUserListStreamDesc = &grpc.StreamDesc{
	StreamName: "GetUserList",
}

func (c *jX3BoxClient) GetUserList(ctx context.Context, in *GetUserListParams, opts ...grpc.CallOption) (*UserListResult, error) {
	out := new(UserListResult)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/GetUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var jX3BoxUserRenameStreamDesc = &grpc.StreamDesc{
	StreamName: "UserRename",
}

func (c *jX3BoxClient) UserRename(ctx context.Context, in *UserRenameParams, opts ...grpc.CallOption) (*UserRenameResult, error) {
	out := new(UserRenameResult)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/UserRename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var jX3BoxGiveUserAwardStreamDesc = &grpc.StreamDesc{
	StreamName: "GiveUserAward",
}

func (c *jX3BoxClient) GiveUserAward(ctx context.Context, in *UserAwardParams, opts ...grpc.CallOption) (*UserAwardResult, error) {
	out := new(UserAwardResult)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/GiveUserAward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var jX3BoxGetPostsStreamDesc = &grpc.StreamDesc{
	StreamName: "GetPosts",
}

func (c *jX3BoxClient) GetPosts(ctx context.Context, in *PostsQueryParams, opts ...grpc.CallOption) (*PostsQueryResult, error) {
	out := new(PostsQueryResult)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/GetPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var jX3BoxSendNotifyStreamDesc = &grpc.StreamDesc{
	StreamName: "SendNotify",
}

func (c *jX3BoxClient) SendNotify(ctx context.Context, in *NotifyMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/SendNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var jX3BoxSendEmailToUserIDStreamDesc = &grpc.StreamDesc{
	StreamName: "SendEmailToUserID",
}

func (c *jX3BoxClient) SendEmailToUserID(ctx context.Context, in *EmailMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/SendEmailToUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var jX3BoxSendEmailToMailboxStreamDesc = &grpc.StreamDesc{
	StreamName: "SendEmailToMailbox",
}

func (c *jX3BoxClient) SendEmailToMailbox(ctx context.Context, in *EmailMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/jx3box.JX3Box/SendEmailToMailbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JX3BoxService is the service API for JX3Box service.
// Fields should be assigned to their respective handler implementations only before
// RegisterJX3BoxService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type JX3BoxService struct {
	// 获取用户
	GetUser func(context.Context, *UserQueryParams) (*User, error)
	// 批量获取用户
	GetUserList func(context.Context, *GetUserListParams) (*UserListResult, error)
	// 用户重命名
	UserRename func(context.Context, *UserRenameParams) (*UserRenameResult, error)
	// 发放用户荣誉
	GiveUserAward func(context.Context, *UserAwardParams) (*UserAwardResult, error)
	// 获取文章
	GetPosts func(context.Context, *PostsQueryParams) (*PostsQueryResult, error)
	// 发送一个通知
	SendNotify func(context.Context, *NotifyMessage) (*Empty, error)
	// Send Email To UserID
	SendEmailToUserID func(context.Context, *EmailMessage) (*Empty, error)
	// send Email to mailbox
	SendEmailToMailbox func(context.Context, *EmailMessage) (*Empty, error)
}

func (s *JX3BoxService) getUser(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/jx3box.JX3Box/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetUser(ctx, req.(*UserQueryParams))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *JX3BoxService) getUserList(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/jx3box.JX3Box/GetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetUserList(ctx, req.(*GetUserListParams))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *JX3BoxService) userRename(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRenameParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UserRename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/jx3box.JX3Box/UserRename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UserRename(ctx, req.(*UserRenameParams))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *JX3BoxService) giveUserAward(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAwardParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GiveUserAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/jx3box.JX3Box/GiveUserAward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GiveUserAward(ctx, req.(*UserAwardParams))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *JX3BoxService) getPosts(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostsQueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/jx3box.JX3Box/GetPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetPosts(ctx, req.(*PostsQueryParams))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *JX3BoxService) sendNotify(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SendNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/jx3box.JX3Box/SendNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SendNotify(ctx, req.(*NotifyMessage))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *JX3BoxService) sendEmailToUserID(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SendEmailToUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/jx3box.JX3Box/SendEmailToUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SendEmailToUserID(ctx, req.(*EmailMessage))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *JX3BoxService) sendEmailToMailbox(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SendEmailToMailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/jx3box.JX3Box/SendEmailToMailbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SendEmailToMailbox(ctx, req.(*EmailMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterJX3BoxService registers a service implementation with a gRPC server.
func RegisterJX3BoxService(s grpc.ServiceRegistrar, srv *JX3BoxService) {
	srvCopy := *srv
	if srvCopy.GetUser == nil {
		srvCopy.GetUser = func(context.Context, *UserQueryParams) (*User, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
		}
	}
	if srvCopy.GetUserList == nil {
		srvCopy.GetUserList = func(context.Context, *GetUserListParams) (*UserListResult, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
		}
	}
	if srvCopy.UserRename == nil {
		srvCopy.UserRename = func(context.Context, *UserRenameParams) (*UserRenameResult, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UserRename not implemented")
		}
	}
	if srvCopy.GiveUserAward == nil {
		srvCopy.GiveUserAward = func(context.Context, *UserAwardParams) (*UserAwardResult, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GiveUserAward not implemented")
		}
	}
	if srvCopy.GetPosts == nil {
		srvCopy.GetPosts = func(context.Context, *PostsQueryParams) (*PostsQueryResult, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
		}
	}
	if srvCopy.SendNotify == nil {
		srvCopy.SendNotify = func(context.Context, *NotifyMessage) (*Empty, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SendNotify not implemented")
		}
	}
	if srvCopy.SendEmailToUserID == nil {
		srvCopy.SendEmailToUserID = func(context.Context, *EmailMessage) (*Empty, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SendEmailToUserID not implemented")
		}
	}
	if srvCopy.SendEmailToMailbox == nil {
		srvCopy.SendEmailToMailbox = func(context.Context, *EmailMessage) (*Empty, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SendEmailToMailbox not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "jx3box.JX3Box",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "GetUser",
				Handler:    srvCopy.getUser,
			},
			{
				MethodName: "GetUserList",
				Handler:    srvCopy.getUserList,
			},
			{
				MethodName: "UserRename",
				Handler:    srvCopy.userRename,
			},
			{
				MethodName: "GiveUserAward",
				Handler:    srvCopy.giveUserAward,
			},
			{
				MethodName: "GetPosts",
				Handler:    srvCopy.getPosts,
			},
			{
				MethodName: "SendNotify",
				Handler:    srvCopy.sendNotify,
			},
			{
				MethodName: "SendEmailToUserID",
				Handler:    srvCopy.sendEmailToUserID,
			},
			{
				MethodName: "SendEmailToMailbox",
				Handler:    srvCopy.sendEmailToMailbox,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "protobuf/jx3box.proto",
	}

	s.RegisterService(&sd, nil)
}
